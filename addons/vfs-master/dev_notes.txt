1. Metatables. Metatables everwhere.
2. Callbacks. Callbacks everywhere.
3. Player folders aren't actually named after them. What you see is just a display name. Their real name would be the steam id of the corresponding player.
4. Many functions take a variable called authId and a callback function. These types of function will always return nothing but will call the callback function at some point.

authId is used to tell who is trying to carry out the action and decide if they're allowed to do so. For most purposes, GAuth.GetLocalId () should be used as its value.
GAuth.GetLocalId () will return either the client's steam ID or "Server" if it's called on the server.
Do not use GAuth.GetLocalId () in server networking code, where it should be set to the id of the player who sent the request. You do not want to be giving players the permissions of the server.

callback may be set to nil or a function taking one or more arguments, the first of which will always be a return code.
Return codes can take a couple of values, but usually you'll only be interested in VFS.ReturnCode.Success and VFS.ReturnCode.AccessDenied.
For some functions (eg. IFolder:EnumerateChildren and IFileStream:Read), the callback may be called multiple times. Watch out for this.
The callback may be called with a 2nd argument for some functions, such as IFolder:CreateFile (), where it'll be passed the newly created IFile.

The root filesystem folder can be found at VFS.Root. VFS.Root is an IFolder.
The root group list can be found at GAuth.Groups. GAuth.Groups is a GroupTree (not documented here).

Function list:
	INode:Delete (authId, function (returnCode))
	INode:GetDisplayName ()
	INode:GetDisplayPath ()
	INode:GetModificationTime ()
		Returns: last modification time in seconds past the unix epoch, or -1 if unavailable.
	INode:GetName ()
	INode:GetOwner ()
		Returns: User id of this node's owner.
	INode:GetPath ()
	INode:GetPermissionBlock ()
		Returns: This node's PermissionBlock
	INode:IsFile ()
	INode:IsFolder ()
	INode:Rename (authId, name, function (returnCode))
	INode:SetOwner (authId, ownerId, function (returnCode))

	IFolder inherits from INode
	IFolder:CreateDirectFile (authId, name, function (returnCode, IFile file))
	IFolder:CreateDirectFolder (authId, name, function (returnCode, IFolder folder))
	IFolder:CreateDirectNode (authId, name, isFolder, function (returnCode, INode node))
	IFolder:CreateFile (authId, relativePath, function (returnCode, IFile file))
	IFolder:CreateFolder (authId, relativePath, function (returnCode, IFolder folder))
	IFolder:CreateNode (authId, relativePath, isFolder, function (returnCode, INode node))
	IFolder:DeleteChild (authId, relativePath, function (returnCode))
	IFolder:DeleteDirectChild (authId, name, function (returnCode))
	IFolder:EnumerateChildren (authId, function (returnCode, INode childNode))
		returnCode can be:
			VFS.ReturnCode.EndOfBurst : Indicates that the callback will not be called any more this frame.
			VFS.ReturnCode.Success : childNode contains a child INode. The same INode may be provided multiple times. INode:GetName () will be unique for every child node in a folder.
			VFS.ReturnCode.Finished : Indicates that the enumeration is done and the callback will not be called any more.
			VFS.ReturnCode.AccessDenied : The user identified by authId does not have the View Folder permission for this folder.
			VFS.ReturnCode.Timeout : No response from the server / client within a reasonable period of time.
	IFolder:EnumerateChildrenSynchronous ()
		Returns: an array of INodes
	IFolder:GetChild (authId, relativePath, function (returnCode, INode childNode))
	IFolder:GetChildSynchronous (relativePath)
		Returns: INode childNode
	IFolder:GetDirectChild (authId, name, function (returnCode, INode childNode))
	IFolder:GetDirectChildSynchronous (name)
		Returns: INode childNode
	IFolder:OpenFile (authId, relativePath, VFS.OpenFlags openFlags, function (returnCode, IFileStream fileStream))
		Valid values for openFlags:
			VFS.OpenFlags.Read
			VFS.OpenFlags.Write
			VFS.OpenFlags.Overwrite
				Implies VFS.OpenFlags.Write
	IFolder:RenameChild (authId, name, newName, function (returnCode))

	IFile inherits from INode
	IFile:GetSize ()
		Returns: Size of the file in bytes or -1 if unavailable
	IFile:Open (authId, VFS.OpenFlags openFlags, function (returnCode, IFileStream fileStream))

	IFileStream:Close ()
		Closes the IFileStream object. This should always be called when you're done with the IFileStream, especially for networked files otherwise they'll just hang around in memory forever.
	IFileStream:GetLength ()
		Returns: Size of the file in bytes. This should never return -1.
	IFileStream:GetDisplayPath ()
		Same as INode:GetDisplayPath ()
	IFileStream:GetPath ()
		Same as INode:GetPath ()
	IFileStream:GetPos ()
		Returns: Position to be next read from / written to. File positions start from 0.
	IFileStream:Read (sizeInBytes, function (returnCode, data))
		returnCode can be:
			VFS.ReturnCode.Progres : data is a number between 0 and 1 indicating the progress of the read operation
			VFS.ReturnCode.Success : data contains the data read and the callback won't be called any more
			VFS.ReturnCode.Timeout
	IFileStream:Write (sizeInBytes, data, function (returnCode))

	PermissionBlock:AddGroupEntry (authId, groupId, function (returnCode))
	PermissionBlock:GetAccess (authId, actionId, permissionBlock)
		Returns: GAuth.Access.Allow, GAuth.Access.Deny or GAuth.Access.None
		
		The third argument is used to determine who the Owner group should refer to.
	PermissionBlock:GetGroupAccess (groupId, actionId, permissionBlock)
		Returns: GAuth.Access.Allow, GAuth.Access.Deny or GAuth.Access.None
		
		The third argument is used to determine who the Owner group should refer to.
	PermissionBlock:GetGroupPermission (groupId, actionid, permissionBlock)
		Returns: GAuth.Access.Allow, GAuth.Access.Deny or GAuth.Access.None
	PermissionBlock:GetOwner ()
		Returns: User id of the owner of this permission block.
	PermissionBlock:GetParent ()
		Returns: This permission block's parent permission block.
	PermissionBlock:InheritsOwner ()
	PermissionBlock:InheritsPermissions ()
	PermissionBlock:IsAuthorized (authId, actionId, permissionBlock)
		Returns: A boolean indicating whether the user identified by authId is allowed to perform the action given by actionId.
		
		The third argument is used to determine who the Owner group should refer to.
	PermissionBlock:RemoveGroupEntry (authId, groupId, function (returnCode))
	PermissionBlock:SetGroupEntry (authId, groupId, actionId, access, function (returnCode))
		access can be GAuth.Access.Allow, GAuth.Access.Deny or GAuth.Access.None
	PermissionBlock:SetInheritOwner (authId, inheritOwner, function (returnCode))
	PermissionBlock:SetInheritPermissions (authId, inheritPermissions, function (returnCode))
	PermissionBlock:SetOwner (authId, ownerId, function (returnCode))

For example, to print out the contents of Public/adv_duplicator:
	VFS.Root:GetChild (GAuth.GetLocalId (), "Public/adv_duplicator",
		function (returnCode, child)
			if returnCode ~= VFS.ReturnCode.Success then
				print ("Access denied (or something else went wrong)")
				return
			end
			if not child:IsFolder () then
				print ("Public/adv_duplicator is not a folder.")
				return
			end
			child:EnumerateChildren (GAuth.GetLocalId (),
				function (returnCode, node)
					if returnCode == VFS.ReturnCode.Success then
						print (node:GetName ())
					elseif returnCode == VFS.ReturnCode.EndOfBurst then
						-- ignore
					elseif returnCode == VFS.ReturnCode.Finished then
						print ("Done")
					else
						print ("Failed.")
					end
				end
			)
		end
	)